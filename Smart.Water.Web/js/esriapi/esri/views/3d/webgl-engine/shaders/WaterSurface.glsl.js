// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports tslib ../core/shaderLibrary/ForwardLinearDepth.glsl ../core/shaderLibrary/Slice.glsl ../core/shaderLibrary/Transform.glsl ../core/shaderLibrary/shading/NormalUtils.glsl ../core/shaderLibrary/shading/ReadShadowMap.glsl ../core/shaderLibrary/shading/Water.glsl ../core/shaderLibrary/shading/WaterDistortion.glsl ../core/shaderModules/interfaces ../core/shaderModules/ShaderBuilder".split(" "),function(A,f,c,v,g,w,e,x,y,h,d,z){Object.defineProperty(f,"__esModule",{value:!0});f.build=
function(b){var a=new z.ShaderBuilder;a.include(w.Transform,{linearDepth:!1});a.attributes.add("position","vec3");a.attributes.add("uv0","vec2");a.vertex.uniforms.add("proj","mat4").add("view","mat4").add("localOrigin","vec3");0===b.output&&(a.include(e.NormalUtils,b),a.include(v.ForwardLinearDepth,b),a.varyings.add("vuv","vec2"),a.varyings.add("vpos","vec3"),a.varyings.add("vnormal","vec3"),a.varyings.add("vtbnMatrix","mat3"),a.vertex.code.add(d.glsl(k||(k=c.__makeTemplateObject(["\n      void main(void) {\n        vuv \x3d uv0;\n        vpos \x3d position;\n\n        vnormal \x3d getLocalUp(vpos, localOrigin);\n        vtbnMatrix \x3d getTBNMatrix(vnormal);\n\n        gl_Position \x3d transformPosition(proj, view, vpos);\n        forwardLinearDepth();\n      }\n    "],
["\n      void main(void) {\n        vuv \x3d uv0;\n        vpos \x3d position;\n\n        vnormal \x3d getLocalUp(vpos, localOrigin);\n        vtbnMatrix \x3d getTBNMatrix(vnormal);\n\n        gl_Position \x3d transformPosition(proj, view, vpos);\n        forwardLinearDepth();\n      }\n    "])))),a.include(h.WaterDistortion,b),a.include(g.Slice,b),b.receiveShadows&&a.include(x.ReadShadowMap,b),a.include(y.Water,b),a.fragment.uniforms.add("waterColor","vec4").add("lightingMainDirection","vec3").add("lightingMainIntensity",
"vec3").add("camPos","vec3").add("timeElapsed","float").add("view","mat4"),a.fragment.code.add(d.glsl(l||(l=c.__makeTemplateObject(["\n      void main() {\n        discardBySlice(vpos);\n        vec3 localUp \x3d vnormal;\n        // the created normal is in tangent space\n        vec4 tangentNormalFoam \x3d getSurfaceNormalAndFoam(vuv, timeElapsed);\n\n        // we rotate the normal according to the tangent-bitangent-normal-Matrix\n        vec3 n \x3d normalize(vtbnMatrix * tangentNormalFoam.xyz);\n        vec3 v \x3d -normalize(vpos - camPos);\n        vec3 l \x3d normalize(-lightingMainDirection);\n        "],
["\n      void main() {\n        discardBySlice(vpos);\n        vec3 localUp \x3d vnormal;\n        // the created normal is in tangent space\n        vec4 tangentNormalFoam \x3d getSurfaceNormalAndFoam(vuv, timeElapsed);\n\n        // we rotate the normal according to the tangent-bitangent-normal-Matrix\n        vec3 n \x3d normalize(vtbnMatrix * tangentNormalFoam.xyz);\n        vec3 v \x3d -normalize(vpos - camPos);\n        vec3 l \x3d normalize(-lightingMainDirection);\n        "])))),b.receiveShadows?
a.fragment.code.add(d.glsl(m||(m=c.__makeTemplateObject(["\n        float shadow \x3d 1.0 - readShadowMap(vpos, linearDepth);\n      "],["\n        float shadow \x3d 1.0 - readShadowMap(vpos, linearDepth);\n      "])))):a.fragment.code.add(d.glsl(n||(n=c.__makeTemplateObject(["\n        float shadow \x3d 1.0;\n      "],["\n        float shadow \x3d 1.0;\n      "])))),a.fragment.code.add(d.glsl(p||(p=c.__makeTemplateObject(["\n        vec4 vPosView \x3d view*vec4(vpos, 1.0);\n        vec4 final \x3d vec4(getSeaColor(n, v, l, waterColor.rgb, lightingMainIntensity, localUp, shadow, tangentNormalFoam.w, vPosView.xyz), waterColor.w);\n\n        // gamma correction\n        gl_FragColor \x3d delinearizeGamma(final);\n        gl_FragColor \x3d highlightSlice(gl_FragColor, vpos);\n      }\n    "],
["\n        vec4 vPosView \x3d view*vec4(vpos, 1.0);\n        vec4 final \x3d vec4(getSeaColor(n, v, l, waterColor.rgb, lightingMainIntensity, localUp, shadow, tangentNormalFoam.w, vPosView.xyz), waterColor.w);\n\n        // gamma correction\n        gl_FragColor \x3d delinearizeGamma(final);\n        gl_FragColor \x3d highlightSlice(gl_FragColor, vpos);\n      }\n    "])))));2===b.output&&(a.include(e.NormalUtils,b),a.include(h.WaterDistortion,b),a.include(g.Slice,b),a.varyings.add("vpos","vec3"),
a.varyings.add("vuv","vec2"),a.vertex.code.add(d.glsl(q||(q=c.__makeTemplateObject(["\n        void main(void) {\n          vuv \x3d uv0;\n          vpos \x3d position;\n          gl_Position \x3d transformPosition(proj, view, vpos);\n        }\n    "],["\n        void main(void) {\n          vuv \x3d uv0;\n          vpos \x3d position;\n          gl_Position \x3d transformPosition(proj, view, vpos);\n        }\n    "])))),a.fragment.uniforms.add("timeElapsed","float"),a.fragment.code.add(d.glsl(r||
(r=c.__makeTemplateObject(["\n        void main() {\n          discardBySlice(vpos);\n\n          // the created normal is in tangent space and foam\n          vec4 tangentNormalFoam \x3d getSurfaceNormalAndFoam(vuv, timeElapsed);\n          tangentNormalFoam.xyz \x3d normalize(tangentNormalFoam.xyz);\n\n          gl_FragColor \x3d vec4((tangentNormalFoam.xyz + vec3(1.0)) * 0.5, tangentNormalFoam.w);\n        }\n    "],["\n        void main() {\n          discardBySlice(vpos);\n\n          // the created normal is in tangent space and foam\n          vec4 tangentNormalFoam \x3d getSurfaceNormalAndFoam(vuv, timeElapsed);\n          tangentNormalFoam.xyz \x3d normalize(tangentNormalFoam.xyz);\n\n          gl_FragColor \x3d vec4((tangentNormalFoam.xyz + vec3(1.0)) * 0.5, tangentNormalFoam.w);\n        }\n    "])))));
5===b.output&&(a.include(e.NormalUtils,b),a.varyings.add("vpos","vec3"),a.vertex.code.add(d.glsl(t||(t=c.__makeTemplateObject(["\n        void main(void) {\n          vpos \x3d position;\n          gl_Position \x3d transformPosition(proj, view, vpos);\n        }\n    "],["\n        void main(void) {\n          vpos \x3d position;\n          gl_Position \x3d transformPosition(proj, view, vpos);\n        }\n    "])))),a.fragment.uniforms.add("waterColor","vec4"),a.fragment.code.add(d.glsl(u||(u=c.__makeTemplateObject(["\n        void main() {\n          gl_FragColor \x3d waterColor;\n        }\n    "],
["\n        void main() {\n          gl_FragColor \x3d waterColor;\n        }\n    "])))));return a};var k,l,m,n,p,q,r,t,u});