// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.16/esri/copyright.txt for details.
//>>built
define("require exports tslib ../geometry ../request ../core/jsonMap ../core/accessorSupport/decorators ../core/accessorSupport/ensureType ../geometry/support/jsonUtils ./Task ./operations/generalize ./operations/lengths ./operations/offset ./operations/relation ./operations/trimExtend ./support/GeneralizeParameters ./support/LengthsParameters ./support/OffsetParameters ./support/ProjectParameters ./support/RelationParameters ./support/TrimExtendParameters".split(" "),function(G,H,c,h,f,p,l,q,g,r,
t,u,v,w,x,y,z,A,B,C,D){var m=new p.JSONMap({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"}),E=q.ensureType(B);return function(n){function b(a){a=n.call(this,a)||this;a.url=null;return a}c.__extends(b,n);b.prototype.areasAndLengths=function(a,b){a=c.__assign(c.__assign(c.__assign({},this.parsedUrl.query),{f:"json"}),a.toJSON());b=this._asValidOptions(a,b);return f(this.parsedUrl.path+"/areasAndLengths",b).then(function(a){return a.data})};b.prototype.autoComplete=
function(a,b,d){var e=a[0].spatialReference;a=c.__assign(c.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(e.toJSON()),polygons:JSON.stringify(this._encodeGeometries(a).geometries),polylines:JSON.stringify(this._encodeGeometries(b).geometries)});d=this._asValidOptions(a,d);return f(this.parsedUrl.path+"/autoComplete",d).then(function(a){return(a.data.geometries||[]).map(function(a){return new h.Polygon({spatialReference:e,rings:a.rings})})})};b.prototype.buffer=function(a,b){var d=c.__assign(c.__assign(c.__assign({},
this.parsedUrl.query),{f:"json"}),a.toJSON()),e=a.outSpatialReference||a.geometries[0].spatialReference;a=this._asValidOptions(d,b);return f(this.parsedUrl.path+"/buffer",a).then(function(a){return(a.data.geometries||[]).map(function(a){return new h.Polygon({spatialReference:e,rings:a.rings})})})};b.prototype.convexHull=function(a,b){var d=a[0].spatialReference;a=c.__assign(c.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(d.toJSON()),geometries:JSON.stringify(this._encodeGeometries(a))});
b=this._asValidOptions(a,b);return f(this.parsedUrl.path+"/convexHull",b).then(function(a){return g.fromJSON(a.data.geometry).set({spatialReference:d})})};b.prototype.cut=function(a,b,d){var e=a[0].spatialReference,k=a.map(function(a){return a.toJSON()});a=c.__assign(c.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(e.toJSON()),target:JSON.stringify({geometryType:g.getJsonType(a[0]),geometries:k}),cutter:JSON.stringify(b.toJSON())});d=this._asValidOptions(a,d);return f(this.parsedUrl.path+
"/cut",d).then(function(a){a=a.data;return{cutIndexes:a.cutIndexes,geometries:(a.geometries||[]).map(function(a){return g.fromJSON(a).set({spatialReference:e})})}})};b.prototype.densify=function(a,b){var d=a.geometries[0].spatialReference;a=c.__assign(c.__assign(c.__assign({},this.parsedUrl.query),{f:"json"}),a.toJSON());b=this._asValidOptions(a,b);return f(this.parsedUrl.path+"/densify",b).then(function(a){return(a.data.geometries||[]).map(function(a){return g.fromJSON(a).set({spatialReference:d})})})};
b.prototype.difference=function(a,b,d){var e=a[0].spatialReference;a={query:c.__assign(c.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(e.toJSON()),geometries:JSON.stringify(this._encodeGeometries(a)),geometry:JSON.stringify({geometryType:g.getJsonType(b),geometry:b.toJSON()})})};if(this.requestOptions||d)a=c.__assign(c.__assign(c.__assign({},this.requestOptions),d),a);return f(this.parsedUrl.path+"/difference",a).then(function(a){return(a.data.geometries||[]).map(function(a){return g.fromJSON(a).set({spatialReference:e})})})};
b.prototype.distance=function(a,b){a=c.__assign(c.__assign(c.__assign({},this.parsedUrl.query),{f:"json"}),a.toJSON());b=this._asValidOptions(a,b);return f(this.parsedUrl.path+"/distance",b).then(function(a){return(a=a.data)&&a.distance})};b.prototype.fromGeoCoordinateString=function(a,b){var d={};d.sr=null!=a.sr&&"object"===typeof a.sr?a.sr.wkid||JSON.stringify(a.sr):a.sr;d.strings=JSON.stringify(a.strings);d.conversionType=m.toJSON(a.conversionType||"mgrs");d.conversionMode=a.conversionMode;a=c.__assign(c.__assign(c.__assign({},
this.parsedUrl.query),{f:"json"}),d);b=this._asValidOptions(a,b);return f(this.parsedUrl.path+"/fromGeoCoordinateString",b).then(function(a){return a.data.coordinates})};b.prototype.generalize=function(a,b){a=y.from(a);var d=a.toJSON();a=t.generalizeToRESTParameters(a);a=c.__assign(c.__assign(c.__assign({},this.parsedUrl.query),{f:"json"}),a);var e=d.geometries[0].spatialReference;b=this._asValidOptions(a,b);return f(this.parsedUrl.path+"/generalize",b).then(function(a){return(a.data.geometries||
[]).map(function(a){return g.fromJSON(a).set({spatialReference:e})})})};b.prototype.intersect=function(a,b,d){var e=a[0].spatialReference;a=c.__assign(c.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(e.toJSON()),geometries:JSON.stringify(this._encodeGeometries(a)),geometry:JSON.stringify({geometryType:g.getJsonType(b),geometry:b.toJSON()})});d=this._asValidOptions(a,d);return f(this.parsedUrl.path+"/intersect",d).then(function(a){return(a.data.geometries||[]).map(function(a){return g.fromJSON(a).set({spatialReference:e})})})};
b.prototype.labelPoints=function(a,b){var d=a.map(function(a){return a.toJSON()}),e=a[0].spatialReference;a=c.__assign(c.__assign({},this.parsedUrl.query),{f:"json",sr:e.wkid?e.wkid:JSON.stringify(e.toJSON()),polygons:JSON.stringify(d)});b=this._asValidOptions(a,b);return f(this.parsedUrl.path+"/labelPoints",b).then(function(a){return(a.data.labelPoints||[]).map(function(a){return g.fromJSON(a).set({spatialReference:e})})})};b.prototype.lengths=function(a,b){a=z.from(a);a=u.lengthsToRESTParameters(a);
a=c.__assign(c.__assign(c.__assign({},this.parsedUrl.query),{f:"json"}),a);b=this._asValidOptions(a,b);return f(this.parsedUrl.path+"/lengths",b).then(function(a){return a.data})};b.prototype.offset=function(a,b){a=A.from(a);var d=v.offsetToRESTParameters(a),d=c.__assign(c.__assign(c.__assign({},this.parsedUrl.query),{f:"json"}),d),e=a.geometries[0].spatialReference;a=this._asValidOptions(d,b);return f(this.parsedUrl.path+"/offset",a).then(function(a){return(a.data.geometries||[]).map(function(a){return g.fromJSON(a).set({spatialReference:e})})})};
b.prototype.project=function(a,b){var d=this;a=E(a);var e=c.__assign(c.__assign(c.__assign({},this.parsedUrl.query),{f:"json"}),a.toJSON()),k=a.outSpatialReference,h=g.getJsonType(a.geometries[0]);a=this._asValidOptions(e,b);return f(this.parsedUrl.path+"/project",a).then(function(a){return d._decodeGeometries(a.data,h,k)})};b.prototype.relation=function(a,b){a=C.from(a);a=w.relationToRESTParameters(a);a=c.__assign(c.__assign(c.__assign({},this.parsedUrl.query),{f:"json"}),a);b=this._asValidOptions(a,
b);return f(this.parsedUrl.path+"/relation",b).then(function(a){return a.data.relations})};b.prototype.reshape=function(a,b,d){var e=a.spatialReference;a=c.__assign(c.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(e.toJSON()),target:JSON.stringify({geometryType:g.getJsonType(a),geometry:a.toJSON()}),reshaper:JSON.stringify(b.toJSON())});d=this._asValidOptions(a,d);return f(this.parsedUrl.path+"/reshape",d).then(function(a){return g.fromJSON(a.data.geometry).set({spatialReference:e})})};
b.prototype.simplify=function(a,b){var d=this,e=a[0].spatialReference,h=c.__assign(c.__assign({},this.parsedUrl.query),{f:"json",sr:e.wkid?e.wkid:JSON.stringify(e.toJSON()),geometries:JSON.stringify(this._encodeGeometries(a))}),F=g.getJsonType(a[0]);a=this._asValidOptions(h,b);return f(this.parsedUrl.path+"/simplify",a).then(function(a){return d._decodeGeometries(a.data,F,e)})};b.prototype.toGeoCoordinateString=function(a,b){var d={};d.sr=null!=a.sr&&"object"===typeof a.sr?a.sr.wkid||JSON.stringify(a.sr):
a.sr;d.coordinates=JSON.stringify(a.coordinates);d.conversionType=m.toJSON(a.conversionType||"mgrs");d.conversionMode=a.conversionMode;d.numOfDigits=a.numOfDigits;d.rounding=a.rounding;d.addSpaces=a.addSpaces;a=c.__assign(c.__assign(c.__assign({},this.parsedUrl.query),{f:"json"}),d);b=this._asValidOptions(a,b);return f(this.parsedUrl.path+"/toGeoCoordinateString",b).then(function(a){return a.data.strings})};b.prototype.trimExtend=function(a,b){a=D.from(a);var d=x.trimExtendToRESTParameters(a),d=c.__assign(c.__assign(c.__assign({},
this.parsedUrl.query),{f:"json"}),d),e=a.sr;a=this._asValidOptions(d,b);return f(this.parsedUrl.path+"/trimExtend",a).then(function(a){return(a.data.geometries||[]).map(function(a){return new h.Polyline({spatialReference:e,paths:a.paths})})})};b.prototype.union=function(a,b){var d=a[0].spatialReference;a=c.__assign(c.__assign({},this.parsedUrl.query),{f:"json",sr:JSON.stringify(d.toJSON()),geometries:JSON.stringify(this._encodeGeometries(a))});b=this._asValidOptions(a,b);return f(this.parsedUrl.path+
"/union",b).then(function(a){return g.fromJSON(a.data.geometry).set({spatialReference:d})})};b.prototype._asValidOptions=function(a,b){a={query:a};if(this.requestOptions||b)a=c.__assign(c.__assign(c.__assign({},this.requestOptions),b),a);return a};b.prototype._encodeGeometries=function(a){for(var b=[],d=a.length,c=0;c<d;c++)b.push(a[c].toJSON());return{geometryType:g.getJsonType(a[0]),geometries:b}};b.prototype._decodeGeometries=function(a,b,d){var e=g.getGeometryType(b);a=a.geometries;var f=[],h=
{spatialReference:d.toJSON()};a.forEach(function(a,b){f[b]=new e(c.__assign(c.__assign({},a),h))});return f};b.prototype._toProjectGeometry=function(a){var b=a.spatialReference.toJSON();return a instanceof h.Extent?new h.Polygon({rings:[[[a.xmin,a.ymin],[a.xmin,a.ymax],[a.xmax,a.ymax],[a.xmax,a.ymin],[a.xmin,a.ymin]]],spatialReference:b}):new h.Polyline({paths:[[].concat(a.points)],spatialReference:b})};b.prototype._fromProjectedGeometry=function(a,b,c){return"extent"===b?(a=a.rings[0],new h.Extent(a[0][0],
a[0][1],a[2][0],a[2][1],c)):new h.Multipoint({points:a.paths[0],spatialReference:c.toJSON()})};b.UNIT_METER=9001;b.UNIT_GERMAN_METER=9031;b.UNIT_FOOT=9002;b.UNIT_SURVEY_FOOT=9003;b.UNIT_CLARKE_FOOT=9005;b.UNIT_FATHOM=9014;b.UNIT_NAUTICAL_MILE=9030;b.UNIT_SURVEY_CHAIN=9033;b.UNIT_SURVEY_LINK=9034;b.UNIT_SURVEY_MILE=9035;b.UNIT_KILOMETER=9036;b.UNIT_CLARKE_YARD=9037;b.UNIT_CLARKE_CHAIN=9038;b.UNIT_CLARKE_LINK=9039;b.UNIT_SEARS_YARD=9040;b.UNIT_SEARS_FOOT=9041;b.UNIT_SEARS_CHAIN=9042;b.UNIT_SEARS_LINK=
9043;b.UNIT_BENOIT_1895A_YARD=9050;b.UNIT_BENOIT_1895A_FOOT=9051;b.UNIT_BENOIT_1895A_CHAIN=9052;b.UNIT_BENOIT_1895A_LINK=9053;b.UNIT_BENOIT_1895B_YARD=9060;b.UNIT_BENOIT_1895B_FOOT=9061;b.UNIT_BENOIT_1895B_CHAIN=9062;b.UNIT_BENOIT_1895B_LINK=9063;b.UNIT_INDIAN_FOOT=9080;b.UNIT_INDIAN_1937_FOOT=9081;b.UNIT_INDIAN_1962_FOOT=9082;b.UNIT_INDIAN_1975_FOOT=9083;b.UNIT_INDIAN_YARD=9084;b.UNIT_INDIAN_1937_YARD=9085;b.UNIT_INDIAN_1962_YARD=9086;b.UNIT_INDIAN_1975_YARD=9087;b.UNIT_FOOT_1865=9070;b.UNIT_RADIAN=
9101;b.UNIT_DEGREE=9102;b.UNIT_ARCMINUTE=9103;b.UNIT_ARCSECOND=9104;b.UNIT_GRAD=9105;b.UNIT_GON=9106;b.UNIT_MICRORADIAN=9109;b.UNIT_ARCMINUTE_CENTESIMAL=9112;b.UNIT_ARCSECOND_CENTESIMAL=9113;b.UNIT_MIL6400=9114;b.UNIT_BRITISH_1936_FOOT=9095;b.UNIT_GOLDCOAST_FOOT=9094;b.UNIT_INTERNATIONAL_CHAIN=109003;b.UNIT_INTERNATIONAL_LINK=109004;b.UNIT_INTERNATIONAL_YARD=109001;b.UNIT_STATUTE_MILE=9093;b.UNIT_SURVEY_YARD=109002;b.UNIT_50KILOMETER_LENGTH=109030;b.UNIT_150KILOMETER_LENGTH=109031;b.UNIT_DECIMETER=
109005;b.UNIT_CENTIMETER=109006;b.UNIT_MILLIMETER=109007;b.UNIT_INTERNATIONAL_INCH=109008;b.UNIT_US_SURVEY_INCH=109009;b.UNIT_INTERNATIONAL_ROD=109010;b.UNIT_US_SURVEY_ROD=109011;b.UNIT_US_NAUTICAL_MILE=109012;b.UNIT_UK_NAUTICAL_MILE=109013;b.UNIT_SQUARE_INCHES="esriSquareInches";b.UNIT_SQUARE_FEET="esriSquareFeet";b.UNIT_SQUARE_YARDS="esriSquareYards";b.UNIT_ACRES="esriAcres";b.UNIT_SQUARE_MILES="esriSquareMiles";b.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters";b.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters";
b.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters";b.UNIT_SQUARE_METERS="esriSquareMeters";b.UNIT_ARES="esriAres";b.UNIT_HECTARES="esriHectares";b.UNIT_SQUARE_KILOMETERS="esriSquareKilometers";c.__decorate([l.property()],b.prototype,"url",void 0);return b=c.__decorate([l.subclass("esri.tasks.GeometryService")],b)}(r)});