1，$ajax( url: '../Handler/WELLCOVER_TRIGGERHandler.ashx?Action=QueryAllData',)
2, case "QueryAllData":
3,GetAllDataList
4,（GetAllList）Smart.Wate.Data\DataAccess\well\DWELLCOVER_TRIGGER.cs
5, （GetTable）Smart.Wate.Model\well\WELLCOVER_TRIGGER.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using Smart.Water.Data.Model;
using Smart.Water.Data.DataAccess;
using Robin.XlsIO;
using Robin.EntLib.Common.Helper;
using Robin.Data.Base;
using Robin.EntLib.Data;
using System.IO;
namespace Smart.Water.Web.Handler
{
    /// <summary>
    /// WELLCOVER_HISTORYREPORTHandler 的摘要说明
    /// </summary>
    public class WELLCOVER_HISTORYREPORTHandler : IHttpHandler
    {

        public void ProcessRequest(HttpContext context)
        {
            context.Response.ContentType = "text/plain";
            string result = string.Empty;
            string action = context.Request.QueryString["Action"];
            switch (action)
            {
                //获取设备数据
                case "QueryAllData":
                    result = this.GetAllDataList(context);
                    break;
                case "GetList":

                    result = this.GetDataForList(context);
                    break;

            }
            context.Response.Write(result);
        }
        /// <summary>
        /// 获取所有设备数据
        /// </summary>
        /// <param name="context"></param>
        /// <returns></returns>
        private string GetAllDataList(HttpContext context)
        {
            string where = string.Empty;
            DWELLCOVER_HISTORYREPORT dhyrantassert = new DWELLCOVER_HISTORYREPORT();
            List<WELLCOVER_HISTORYREPORT> dataList = dhyrantassert.GetAllList(new WhereClip(where));
            string result = JsonHelper.SerializeObject(dataList);
            return result;
        }
        //获取已安装井盖监控列表
        private string GetDataForList(HttpContext context)
        {

            string where = string.Empty;
            DWELLCOVER_HISTORYREPORT dhyrantassert = new DWELLCOVER_HISTORYREPORT();


            string result = string.Empty;
            string iDisplayStart = context.Request["iDisplayStart"];
            string iDisplayLength = context.Request["iDisplayLength"];
            string briName = context.Request["name"];
            string echo = context.Request["sEcho"];
            int startIndex = 0, pagesize = 7;
            int.TryParse(iDisplayStart, out startIndex);
            int.TryParse(iDisplayLength, out pagesize);
            int count = 0;

            //if (!string.IsNullOrEmpty(briName))
            //{
            //    where += " and ROADINFO like '%" + briName + "%' ";

            //}
            //where += "  order by REPORTTIME desc";
            FormatedList<List<WELLCOVER_HISTORYREPORT>> formlist = new FormatedList<List<WELLCOVER_HISTORYREPORT>>();
            try
            {
                count = dhyrantassert.Count(where);
                formlist.sEcho = int.Parse(echo);
                formlist.iTotalRecords = count;
                formlist.iTotalDisplayRecords = count;
                formlist.aaData = dhyrantassert.GetList(where, startIndex, pagesize);
                result = JsonHelper.SerializeObject(formlist);

            }
            catch (Exception ex)
            {
                //throw new Exception(ex.ToString());
            }
            // List<WELLCOVER_HISTORYREPORT> dataList = dhyrantassert.GetAllList(new WhereClip(where));
            //string result = JsonHelper.SerializeObject(dataList);
            return result;
        }
        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
    }
}

